@startuml
!theme spacelab
!define PLANTUML_OUTPUT_DIR ./Snapshops
' STYLE START
hide empty members
skinparam shadowing false
' STYLE END

class "User" as User << (C, DarkSeaGreen) >> {  
}
class "TemperatureStatus" as TemperatureStatus << (S, SkyBlue) struct >> { 
  ~compressor : Bool
  ~light : Bool
  ~resistance : Bool
  ~fan : Bool
  ~door : Bool
  ~init(compressor:light:resistance:fan:door:)
  ~{static} ==(_:_:) 
}
class "TemperatureError" as TemperatureError << (E, LightSteelBlue) enum >> { 
  ~inconsistentUnit
  ~outOfRangeSetPoint
  ~sameMinMaxValue 
}
class "SetPoint" as SetPoint << (C, DarkSeaGreen) >> { 
  ~temperature : Temperature
  ~temperatureSetPoint : Temperature
  ~maxTemperature : Temperature
  ~minTemperature : Temperature
  ~init(temperature:temperatureGoal:maxTemperature:minTemperature:)
  ~upScaleSetPoint()
  ~canAddUp()
  ~downScaleSetPoint()
  ~canDropDown()
  ~getImageNumber() 
}
class "Temperature" as Temperature << (C, DarkSeaGreen) >> { 
  ~value : Double
  ~unit : TemperatureUnit
  -interval : Double
  ~pushUp()
  ~pullDown()
  ~init(value:unit:interval:)
  ~converted(to:)
  ~hash(into:)
  ~{static} ==(_:_:)
  ~stringValue : String 
}
class "CoolManager" as CoolManager << (C, DarkSeaGreen) >> { 
  ~user : User
  ~refrigerator : Refrigerator
  ~init(_:_:)
  ~excecute(_:) 
}
class "DoorOpenedCoolManagerMock" as DoorOpenedCoolManagerMock << (C, DarkSeaGreen) >> { 
  ~init()
  ~excecute(_:) 
}
class "NormalCoolManagerMock" as NormalCoolManagerMock << (C, DarkSeaGreen) >> { 
  ~init()
  ~excecute(_:) 
}
class "DefrostingRefrigeratorMock" as DefrostingRefrigeratorMock << (C, DarkSeaGreen) >> { 
  ~init()
  ~excecute(_:) 
}
class "Refrigerator" as Refrigerator << (C, DarkSeaGreen) >> { 
  ~setPoint : SetPoint
  -state : RefrigeratorState?
  ~components
  ~init(setPoint:fan:door:compressor:light:resistance:)
  ~processTemperature()
  ~currentTemperatureStatus : Temperature
  ~door : Door
  ~compressor : Compressor
  ~light : Light
  ~resistance : Resistance
  ~fan : Fan
  ~currentStateName()
  ~printStatus() 
}
class "TemperatureUnit" as TemperatureUnit << (E, LightSteelBlue) enum >> { 
  ~celsius
  ~fahrenheit 
}
class "Refrigerator" as Refrigerator0 << (X, Orchid) extension >> { 
  ~setState(_:) 
}
Equatable <|-- TemperatureStatus : inherits
Error -- TemperatureError : inherits
Hashable <|-- Temperature : inherits
Equatable <|-- Temperature : inherits
CoolManager <|-- DoorOpenedCoolManagerMock : inherits
CoolManager <|-- NormalCoolManagerMock : inherits
CoolManager <|-- DefrostingRefrigeratorMock : inherits
Refrigerator <.. Refrigerator0 : ext
@enduml

